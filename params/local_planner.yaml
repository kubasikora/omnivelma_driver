# # The maximum x velocity for the robot in m/s
# max_vel_x: 0.3

# # The minimum x velocity for the robot in m/s
# max_vel_x_backwards: 0.3

# # The x acceleration limit of the robot in meters/sec^2
# acc_lim_x: 0.2


# # The maximum y velocity for the robot in m/s
# max_vel_y: 0.3

# # The minimum y velocity for the robot in m/s
# min_vel_y: -0.3

# # The y acceleration limit of the robot in meters/sec^2
# acc_lim_y: 0.2

# wheelbase: 0.76

# # the maximum rotational velocity allowed for the base in radians/sec
# max_vel_theta: 0.2

# # The absolute value of the minimum rotational velocity for the robot in rad/s
# min_vel_theta: -0.2

# min_in_place_vel_theta: 0.3

# # The rotational acceleration limit of the robot in radians/sec^2 
# acc_lim_theta: 0.1

# # The absolute value of the maximum translational velocity for the robot in m/s 
# max_trans_vel: 0.55


# # The tolerance in radians for the controller in yaw/rotation when achieving its goa
# yaw_goal_tolerance: 0.05
# # The tolerance in meters for the controller in the x & y distance when achieving a goal
# xy_goal_tolerance: 0.05

# # If goal tolerance is latched, if the robot ever reaches the goal xy location 
# # it will simply rotate in place, 
# # even if it ends up outside the goal tolerance while it is doing so.
# latch_xy_goal_tolerance: false

# # The amount of time to forward-simulate trajectories in seconds
# sim_time: 3

# # The step size, in meters, to take between points on a given trajectory
# sim_granularity: 0.025

# # The number of samples to use when exploring the x velocity space
# vx_samples: 20

# # The number of samples to use when exploring the x velocity space
# vy_samples: 20

# # The number of samples to use when exploring the theta velocity space
# vth_samples: 20

# # The frequency at which this controller will be called in Hz.
# controller_frequency: 4

# #cost =
# #  path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
# #  + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
# #  + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

# # The weighting for how much the controller should stay close to the path it was given
# path_distance_bias: 20.0
# # The weighting for how much the controller should attempt to reach its local goal, also controls speed
# goal_distance_bias: 10.0
# # The weighting for how much the controller should attempt to avoid obstacles
# occdist_scale: 0.01
# # The distance from the center point of the robot to place an additional scoring point, in meters
# forward_point_distance: 0.01
# # Whether or not to publish the cost grid that the planner will use when planning. 
# publish_cost_grid: true

# weight_kinematics_nh: 1.0


TebLocalPlannerROS: 
 # Trajectory
  
 teb_autosize: True
 dt_ref: 0.3
 dt_hysteresis: 0.1
 max_samples: 500
 global_plan_overwrite_orientation: True
 allow_init_with_backwards_motion: False
 max_global_plan_lookahead_dist: -1
 global_plan_viapoint_sep: -1
 global_plan_prune_distance: 1
 exact_arc_length: False
 feasibility_check_no_poses: 5
 publish_feedback: True
    
 # Robot
         
 max_vel_x: 0.3
 max_vel_x_backwards: 0.3
 max_vel_y: 0.3
 max_vel_theta: 0.4
 acc_lim_x: 0.2
 acc_lim_y: 0.2
 acc_lim_theta: 0.2
 min_turning_radius: 0.0 # omni-drive robot (can turn on place!)

 footprint_model:
   type: "polygon"
   vertices: [[-0.36, -0.3775], [0.36, -0.3775], [0.36, 0.3775], [-0.36, 0.3775]]

 # GoalTolerance
    
 xy_goal_tolerance: 0.01
 yaw_goal_tolerance: 0.01
 free_goal_vel: False
 complete_global_plan: True
    
 # Obstacles
    
 min_obstacle_dist: 5.0
 inflation_dist: 10.0
 include_costmap_obstacles: True
 include_dynamic_obstacles: True
 costmap_obstacles_behind_robot_dist: 1.0
 obstacle_poses_affected: 15
 costmap_converter_plugin: ""
 costmap_converter_spin_thread: True
 costmap_converter_rate: 5
 allow_init_with_backwards_motion: True

 # Optimization
    
 no_inner_iterations: 5
 no_outer_iterations: 4
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.05
 obstacle_cost_exponent: 4
 weight_max_vel_x: 2
 weight_max_vel_y: 2
 weight_max_vel_theta: 5
 weight_acc_lim_x: 1
 weight_acc_lim_y: 1
 weight_acc_lim_theta: 10
 weight_kinematics_nh: 0.1 # WE HAVE A HOLONOMIC ROBOT, JUST ADD A SMALL PENALTY
 weight_kinematics_forward_drive: 0
 weight_kinematics_turning_radius: 0
 weight_optimaltime: 0.01 # must be > 0
 weight_shortest_path: 0
 weight_obstacle: 100
 weight_inflation: 70
 weight_dynamic_obstacle: 100
 weight_dynamic_obstacle_inflation: 75
 weight_viapoint: 1
 weight_adapt_factor: 2

 # Homotopy Class Planner

 enable_homotopy_class_planning: True
 enable_multithreading: True
 max_number_classes: 4
 selection_cost_hysteresis: 1.0
 selection_prefer_initial_plan: 0.9
 selection_obst_cost_scale: 1.0
 selection_alternative_time_cost: False
 
 roadmap_graph_no_samples: 15
 roadmap_graph_area_width: 5
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.5
 h_signature_threshold: 0.1
 obstacle_heading_threshold: 0.45
 switching_blocking_period: 0.0
 viapoints_all_candidates: True
 delete_detours_backwards: True
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: False
 visualize_with_time_as_z_axis_scale: False

# Recovery
 
 shrink_horizon_backup: True
 shrink_horizon_min_duration: 10
 oscillation_recovery: True
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10